//This file is generated by excel exporter. If you want to change the workflow, see 'DataServiceTemplate' class in ExcelExporter first.
using System.Collections.Generic;
using UnityEngine;
using System.IO;
namespace ExcelData
{
    public interface IDataSheet
    {
        string sheetName { get; }
    }

    public interface ILocalizationSheet : IDataSheet
    {
        void RefreshLocalizationValues();
    }

    public class SheetHeader
    {
        public struct Item
        {
            public string name;
            public string valType;
        }

        public readonly List<Item> items = new List<Item>();

        public int IndexOf(string itemName, string valueType)
        {
            for (int i = 0, cnt = items.Count; i < cnt; ++i)
            {
                Item item = items[i];
                if ((item.name == itemName) && (item.valType == valueType))
                {
                    return i;
                }
            }
            return -1;
        }

        public void ReadFrom(BinaryReader reader)
        {
            items.Clear();
            int itemCount = reader.ReadInt32();
            for (int i = 0; i < itemCount; ++i)
            {
                Item newItem = new Item();
                newItem.name = reader.ReadString();
                newItem.valType = reader.ReadString();
                items.Add(newItem);
            }
        }
    }

    public static class DataService
    {
        private static List<IDataSheet> s_DataSheets = new List<IDataSheet>();
        public static readonly SheetHeader reusableHeader = new SheetHeader();

        public delegate string GetLocalizedTextCallback(string sheetName, string key);
        public delegate byte[] GetSheetBytesCallback(string name);

        /// <summary>
        /// TODO: Set this callback to load your own localized texts.
        /// </summary>
        public static GetLocalizedTextCallback getLocalizedTextCallback = null;
        /// <summary>
        /// TODO: Set this callback to load your own sheet bytes.
        /// </summary>
        public static GetSheetBytesCallback getSheetBytesCallback = null;

        public static void RegisterSheet(IDataSheet dataSheet)
        {
            if (!s_DataSheets.Contains(dataSheet))
            {
                s_DataSheets.Add(dataSheet);
            }
        }

        public static void RefreshLocalizationSheets()
        {
            //TODO:This is the example, you should feel free to use your own way to refresh localization values.
            for(int i = 0, cnt = s_DataSheets.Count; i < cnt; ++i)
            {
                IDataSheet dataSheet = s_DataSheets[i];
                (dataSheet as ILocalizationSheet)?.RefreshLocalizationValues();
            }
        }

        public static string GetLocalizedText(string sheetName, string key)
        {
            //TODO:This is the example, you can use your own way to provide language text.
            if (getLocalizedTextCallback != null)
            {
                return getLocalizedTextCallback(sheetName, key);
            }
            return null;
        }

        public static byte[] GetSheetBytes(string sheetName)
        {
            //TODO:This is the example, you can use your own way to read data. For example, read data from assetbundles.
            if (getSheetBytesCallback != null)
            {
                return getSheetBytesCallback(sheetName);
            }

            string resPath = string.Format("ExcelData/{0}", sheetName);
            TextAsset textData = Resources.Load<TextAsset>(resPath);
            return textData != null ? textData.bytes : null;
        }

        public static void ReadAndDrop(BinaryReader reader, string valType)
        {
            if (valType.EndsWith("[]"))
            {
                int count = reader.ReadInt32();
                string cellValType = valType.Substring(0, valType.Length - 2);
                for (int i = 0; i < count; ++i)
                {
                    ReadAndDropCellValue(reader, cellValType);
                }
            }
            else
            {
                ReadAndDropCellValue(reader, valType);
            }
        }

        private static void ReadAndDropCellValue(BinaryReader reader, string valType)
        {
            switch (valType)
            {
                case "byte":
                    reader.ReadByte();
                    break;
                case "int":
                    reader.ReadInt32();
                    break;
                case "uint":
                    reader.ReadUInt32();
                    break;
                case "long":
                    reader.ReadInt64();
                    break;
                case "ulong":
                    reader.ReadUInt64();
                    break;
                case "float":
                    reader.ReadSingle();
                    break;
                case "double":
                    reader.ReadDouble();
                    break;
                case "string":
                case "localizedstring":
                    reader.ReadString();
                    break;
                default:
                    throw new System.NotImplementedException(valType);
            }
        }
    }
}
